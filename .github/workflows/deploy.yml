name: D√©ploiement Multi-Environnement (OIDC)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environnement √† d√©ployer'
        required: true
        default: prod
        type: choice
        options:
          - dev
          - staging
          - prod
      image_tag:
        description: 'Tag de l‚Äôimage Docker √† d√©ployer (laisser vide pour dernier tag)' # ‚úÖ MODIF
        required: false # ‚úÖ MODIF
        type: string # ‚úÖ MODIF

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Initialiser variables d'environnement
        id: vars
        env:
          ENV: ${{ github.event.inputs.environment }}
          IMAGE_TAG: ${{ github.event.inputs.image_tag }}
        run: |
          echo "ENV=$ENV" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

          echo "Variables d'environnement initialis√©es :"
          echo "- ENV=$ENV"
          echo "- IMAGE_TAG=$IMAGE_TAG"

      - name: Checkout du code
        uses: actions/checkout@v3
        # Utilise la branche s√©lectionn√©e sur GitHub (par d√©faut workflow_dispatch ref)
        with:
          ref: ${{ github.ref_name }}

      - name: Configurer AWS avec OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsECRRole
          aws-region: ca-central-1

      - name: Connexion √† EKS (mise √† jour kubeconfig)
        run: aws eks update-kubeconfig --region ca-central-1 --name mon-cluster

      - name: Installer Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.0

      - name: R√©cup√©rer le dernier tag ECR si aucun tag fourni
        run: |
          if [ -z "$IMAGE_TAG" ]; then
            LATEST_TAG=$(aws ecr describe-images \
              --repository-name touchtunes \
              --region ca-central-1 \
              --query 'sort_by(imageDetails,&imagePushedAt)[-1].imageTags[0]' \
              --output text)
            echo "IMAGE_TAG=$LATEST_TAG" >> $GITHUB_ENV
            echo "Dernier tag r√©cup√©r√© depuis ECR : $LATEST_TAG"
          else
            echo "IMAGE_TAG d√©j√† fourni : $IMAGE_TAG"
          fi

      - name: V√©rifier la pr√©sence de l'image Docker dans ECR
        run: |
          echo "V√©rification de l'image $IMAGE_TAG dans ECR..."
          if ! aws ecr describe-images --repository-name touchtunes --image-ids imageTag="$IMAGE_TAG" --region ca-central-1; then
            echo "ERREUR : L'image Docker avec le tag '$IMAGE_TAG' n'existe PAS dans le d√©p√¥t ECR 'touchtunes'."
            exit 1
          fi
          
          
      - name: Pr√©parer les ressources existantes pour Helm
        env:
          ENV: ${{ env.ENV }}
        run: |
          echo "Pr√©paration des ressources pour Helm dans l'environnement : $ENV"

          prepare_for_helm() {
            local kind=$1
            local name=$2
            local namespace=$3
            local release=backend-$namespace

            if kubectl get $kind $name -n $namespace > /dev/null 2>&1; then
              echo "üîÑ $kind/$name existe d√©j√† ‚Üí patch pour $release"
              kubectl label $kind $name app.kubernetes.io/managed-by=Helm -n $namespace --overwrite
              kubectl annotate $kind $name \
                meta.helm.sh/release-name=$release \
                meta.helm.sh/release-namespace=$namespace \
                -n $namespace --overwrite
            else
              echo "‚úÖ $kind/$name n'existe pas, Helm pourra le cr√©er."
            fi
          }

          # Liste des ressources critiques √† pr√©parer
          prepare_for_helm secret backend-secret $ENV
          prepare_for_helm configmap backend-config $ENV
          prepare_for_helm service backend-service $ENV


      - name: D√©ployer avec Helm
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          ENV: ${{ env.ENV }}
        run: |
          echo "D√©ploiement sur l'environnement : $ENV"
          echo "Tag image : $IMAGE_TAG"
          
          helm upgrade --install backend-$ENV ./charts \
            --namespace $ENV \
            --create-namespace \
            --values ./charts/values.yaml \
            --values ./charts/values-$ENV.yaml \
            --set image.repository=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ca-central-1.amazonaws.com/touchtunes \
            --set image.tag=$IMAGE_TAG \
            --atomic

      - name: V√©rifier le statut des pods d√©ploy√©s
        run: |
          kubectl get pods -n $ENV
          kubectl describe deployment backend-deployment -n $ENV